datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  workspaces            WorkspaceMember[]
  createdWorkspaces     Workspace[]            @relation("CreatedBy")
  boards                Board[]
  auditLogs             AuditLog[]
  Comment               Comment[]
  Card                  Card[]
  calendarEvents        CalendarEvent[]
  documents             Document[]             @relation("DocumentEditors")
  createdDocuments      Document[]
  Notification          Notification[]
  Server                Server[]
  Channel               Channel[]
}

model Workspace {
  id             String            @id @default(cuid())
  name           String
  logo           String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdById    String
  createdBy      User              @relation("CreatedBy", fields: [createdById], references: [id])
  members        WorkspaceMember[]
  boards         Board[]
  calendarEvents CalendarEvent[]
  documents      Document[]
  Notification   Notification[]
  servers        Server[]
}

model Document {
  id          String    @id @default(cuid())
  title       String
  content     String?   @db.Text
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]    @relation("DocumentEditors")
  cards       Card[]    @relation("CardDocuments") // Nouvelle relation

  @@index([workspaceId])
}

model CalendarEvent {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  color       String? // Pour la personnalisation visuelle
  isAllDay    Boolean  @default(false)

  // Relation avec Card (optionnelle)
  cardId String?
  card   Card?   @relation(fields: [cardId], references: [id], onDelete: SetNull)

  // Relation avec User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation avec Workspace
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
  @@index([userId])
  @@index([cardId])
}

model WorkspaceSubscription {
  id          String @id @default(uuid())
  workspaceId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        UserRole  @default(USER)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt    DateTime  @default(now())

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  Server                 Server?        @relation(fields: [serverId], references: [id])
  serverId               String?

  @@unique([workspaceId, userId])
}

// Modification du modèle Server
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workspaceMembers WorkspaceMember[]
  channels         Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([workspaceId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  workspaceMemberId String
  workspaceMembers  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([workspaceMemberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   WorkspaceMember @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   WorkspaceMember @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  workspaceMemberId String
  workspaceMembers  WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceMemberId])
  @@index([conversationId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id          String  @id @default(uuid())
  workspaceId String
  title       String
  lists       List[]
  createdById String
  image       String?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
  Tag  Tag[]
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards   Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Card {
  id          String    @id @default(uuid())
  title       String
  order       Int
  description String?   @db.Text
  priority    Priority?

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  assignedUserId String? // Ajout du champ pour stocker l'ID de l'utilisateur assigné
  assignedUser   User?   @relation(fields: [assignedUserId], references: [id])

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comments    Comment[]
  documents   Document[]   @relation("CardDocuments") // Nouvelle relation
  attachments Attachment[]

  calendarEvents CalendarEvent[]

  tags Tag[]  @relation("CardTags")
  Tag  Tag[]
  tasks Task[]

  @@index([listId])
}

model Task {
  id        String   @id @default(uuid())
  title     String
  completed Boolean  @default(false)
  order     Int
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

model Tag {
  id      String @id @default(cuid())
  name    String
  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards   Card[] @relation("CardTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Card      Card?    @relation(fields: [cardId], references: [id])
  cardId    String?

  @@unique([name, boardId]) // Un tag doit être unique dans un board
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  key       String // S3 key for deletion
  cardId    String
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

model Comment {
  id       String  @id @default(uuid())
  text     String  @db.Text
  cardId   String
  userId   String
  modified Boolean @default(false) // Statut de lecture de la notification

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id          String      @id @default(uuid())
  workspaceId String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  userId    String? // Le ? indique que ce champ peut être null ou undefined
  createdAt DateTime @default(now())
}

model Notification {
  id          String    @id @default(cuid()) // ID unique pour la notification
  userId      String // L'utilisateur auquel la notification appartient
  user        User      @relation(fields: [userId], references: [id]) // Relation avec l'utilisateur
  workspaceId String // ID du workspace associé à la notification
  workspace   Workspace @relation(fields: [workspaceId], references: [id]) // Relation avec le workspace
  message     String // Message de la notification
  read        Boolean   @default(false) // Statut de lecture de la notification
  createdAt   DateTime  @default(now()) // Date de création de la notification
  updatedAt   DateTime  @updatedAt // Date de mise à jour de la notification

  @@index([userId]) // Index pour l'utilisateur
  @@index([workspaceId]) // Index pour le workspace
}
